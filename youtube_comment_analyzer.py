{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/divython/SIC_AI/blob/main/youtube_comment_analyzer.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "f5TNtVUBlnsP"
      },
      "outputs": [],
      "source": [
        "import re\n",
        "\n",
        "def clean_text(text):\n",
        "    # Remove special characters, URLs, and non-alphanumeric characters\n",
        "    text = re.sub(r'http\\S+', '', text)\n",
        "    text = re.sub(r'[^A-Za-z\\s]', '', text)\n",
        "    # Convert to lowercase\n",
        "    text = text.lower()\n",
        "    return text\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "YFNiwGxMB_c5"
      },
      "outputs": [],
      "source": [
        "import nltk\n",
        "\n",
        "def tokenize_text(text):\n",
        "    # Tokenize the text into words\n",
        "    tokens = nltk.word_tokenize(text)\n",
        "    return tokens\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "9BiCdyt6CDgE"
      },
      "outputs": [],
      "source": [
        "from nltk.corpus import stopwords\n",
        "\n",
        "def remove_stopwords(tokens):\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    # Remove stopwords\n",
        "    tokens = [word for word in tokens if word not in stop_words]\n",
        "    return tokens\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "LFgCQrIdCIBU"
      },
      "outputs": [],
      "source": [
        "from nltk.stem import WordNetLemmatizer\n",
        "\n",
        "def lemmatize_words(tokens):\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    # Lemmatize words\n",
        "    lemmatized_tokens = [lemmatizer.lemmatize(word) for word in tokens]\n",
        "    return lemmatized_tokens\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "vtL-yorPCM1s"
      },
      "outputs": [],
      "source": [
        "def preprocess_text(comment):\n",
        "    cleaned_comment = clean_text(comment)\n",
        "    tokens = tokenize_text(cleaned_comment)\n",
        "    tokens = remove_stopwords(tokens)\n",
        "    tokens = lemmatize_words(tokens)\n",
        "    return ' '.join(tokens)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "BvL_RB6iCeiN"
      },
      "outputs": [],
      "source": [
        "from textblob import TextBlob\n",
        "\n",
        "def analyze_sentiment(comment):\n",
        "    analysis = TextBlob(comment)\n",
        "    # Assign a sentiment score\n",
        "    if analysis.sentiment.polarity > 0:\n",
        "        return 'positive'\n",
        "    elif analysis.sentiment.polarity < 0:\n",
        "        return 'negative'\n",
        "    else:\n",
        "        return 'neutral'\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "5kwyTa8JCg9B"
      },
      "outputs": [],
      "source": [
        "def perform_sentiment_analysis(preprocessed_comments):\n",
        "    sentiment_scores = {'positive': 0, 'neutral': 0, 'negative': 0}\n",
        "\n",
        "    for comment in preprocessed_comments:\n",
        "        sentiment = analyze_sentiment(comment)\n",
        "        sentiment_scores[sentiment] += 1\n",
        "\n",
        "    return sentiment_scores\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "d_lN0w7UCk5y",
        "outputId": "83f3b5c5-2e5b-4ad8-98e5-f21b2aa6482e"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_sentiment_distribution(sentiment_scores):\n",
        "    labels = sentiment_scores.keys()\n",
        "    sizes = [sentiment_scores[label] for label in labels]\n",
        "\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, colors=['#66b3ff', '#99ff99', '#ff9999'])\n",
        "    plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
        "    plt.title('Sentiment Distribution of Comments')\n",
        "    plt.show()\n",
        "\n",
        "# Example usage\n",
        "sentiment_scores = {'positive': 30, 'neutral': 50, 'negative': 20}\n",
        "plot_sentiment_distribution(sentiment_scores)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3iwdsxiPE_qx",
        "outputId": "3101507a-eab6-4cef-f60d-807eaadb68f9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.10/dist-packages (2.84.0)\n",
            "Requirement already satisfied: httplib2<1dev,>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (0.22.0)\n",
            "Requirement already satisfied: google-auth<3.0.0dev,>=1.19.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (2.17.3)\n",
            "Requirement already satisfied: google-auth-httplib2>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (0.1.0)\n",
            "Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (2.11.1)\n",
            "Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (4.1.1)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (1.60.0)\n",
            "Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0.dev0,>=3.19.5 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (3.20.3)\n",
            "Requirement already satisfied: requests<3.0.0.dev0,>=2.18.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (2.31.0)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3.0.0dev,>=1.19.0->google-api-python-client) (5.3.1)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3.0.0dev,>=1.19.0->google-api-python-client) (0.3.0)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3.0.0dev,>=1.19.0->google-api-python-client) (1.16.0)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3.0.0dev,>=1.19.0->google-api-python-client) (4.9)\n",
            "Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.10/dist-packages (from httplib2<1dev,>=0.15.0->google-api-python-client) (3.1.1)\n",
            "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3.0.0dev,>=1.19.0->google-api-python-client) (0.5.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (3.2.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (3.4)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (2.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client) (2023.7.22)\n"
          ]
        }
      ],
      "source": [
        "!pip install google-api-python-client\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E_Nhu4ueGUgl",
        "outputId": "1514760e-0f53-49aa-d0a2-a125b44078a2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "import nltk\n",
        "nltk.download('punkt')\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "hWNToXnKFGLS",
        "outputId": "2c523943-db8d-44aa-a932-6e8d8b2a2321"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Comments fetched from the video:\n",
            "As a Android developer with 3 years of industry experience. Though i never used udemy to learn Android i always used Android Developers courses, but Learning through Udemy is obviously the best option because in last 3 years there are many changes in Android platform so learning it from random resources will not help at all.\n",
            "I struggled a lot when I am about to start my android development journey around 4 months ago. First I started learning kotlin but then I stopped because I am just watching random youtube tutorials and not making any app. That's why I have enrolled in the flutter and dart course by acadmind which you mentioned in the video and completed the course. Thanks harry bhai for this roadmap as after completing flutter, I will start learning kotlin and jetpack compose to learn native app development. 😊😊\n",
            "Android development in 100 days challenge please 🙏\n",
            "I've been using Flutter professionally for almost two years, and I have a basic understanding of design patterns and developing effective code. Now since native is the foundation of everything, I also intend to code in Kotlin.\n",
            "The best roadmap for Android Development on the Internet (as usual) can only be given by Harry Bhaiya 👍\n",
            "Nice road map Harry Bhai You're uploading awesome content about the tech field/industry keep it up. Thanks for sharing your insights with us.\n",
            "Every Other Teacher in Youtuber one side and #HarryBhai on one side.\n",
            "Harry bhai is the most underrated OG teacher in IT Sector.\n",
            "Harry bhai make complex thing look easy.\n",
            "\n",
            "\n",
            "LOVE YOU HARRY BHAI.\n",
            "Hi Harry, \n",
            "I am new to Development, \n",
            "I tried the same thing, Design and develop complete end to end Android Java App in 23 Days,, i used Android Java with Volley Library and Mysql.... now i will try to recreate it using kotlin and firebase then I will launch it,\n",
            "Hey Harry ...your tutorials are awesome. continue this ❤❤\n",
            "Humble request to Harry,\n",
            "Bro please make tutorial on Kotlin Android Development 2023 for Beginners. Make us project ready. You will be appreciated a lot. Thanks in advance ❤\n",
            "Harry bhai bring new course about Android development ❤ your course help people just like me who can't afford to buy courses or go university 🥺\n",
            "please launch a course as  i understand concepts in very less time and too easily when study from your course in your language. 👍👍\n",
            "You have make so many videos on web development then why don't you bring our own course of android development, it would be appreciative.\n",
            "I was curious about Android Dev from few weeks and here Harry bhaiya posted a roadmap. Really Appreciate it.\n",
            "Sir please,Create a full series on flutter, with a full project with Android studio setup.🤗🤗🤗\n",
            "We need a playlist on Android studio 2023 ❤\n",
            "Thank you soo much harry. It was so helpful. All the best for your future.\n",
            "Harry bhai, I really need your help. I have completed my 12th grade with a 7-year gap, and I am now 24 years old. I want to learn web development and secure a job as soon as possible. Can you please suggest some of the best courses? I've tried learning from YouTube and self-paced courses, but I've been unsuccessful. I am considering joining the Edureka Full Stack Web Development Internship course. Is this a good choice, or is the web development program by Prepleaf at Masai School a better option? Your guidance is crucial to me as I'm eager to build a career in this field as quickly as possible. Please help me, Harry bhai\n",
            "I miss those days when Harry bhai used to draw everything about roadmap on whiteboard\n",
            "Bhaiya it's really a very nice video needed this   \n",
            "But please also provide free course for this😅 \n",
            "And one thing also before watching this video i have started your java tutorials playlist few days ago but not completed much of that so what should i do please tell me please\n",
            "#HarryBhai - Your video helps a lot in learning java coding.\n",
            "\n",
            "Please help \n",
            "\n",
            "\n",
            "what is the java code to show latest post on top in recyclerview.  \n",
            "\n",
            "Source of data - Firebase.  \n",
            "Data Type - PDF.  \n",
            "Code Editor - Android Studio.\n",
            "\n",
            "\n",
            "I am using this code but it is not working.  The post is never coming to the top, it is coming somewhere in between.\n",
            "\n",
            "\n",
            "LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false);\n",
            "    linearLayoutManager.setStackFromEnd(true);\n",
            "    linearLayoutManager.setReverseLayout(true);\n",
            "Hey Harry! i have already completed the first course you suggested by Denis Panjuta. As JetPack compose is the modern tool for making UI. Should i use this or stick to XML?\n",
            "Yes sir , after using android studio learned to become patience and mentally clam person😄\n",
            "Dr Angela Yu is the best teacher ever  simply no doubt she's a real GOAT ! The presentation , task , projects and notes simply perfect !\n",
            "Hi, I want to make my enterprises application. Can I make in Springboot for web application and use Kotlin for android app... Please advise accordingly I can join Udemy course in your Link. I have good knowledge of PHP, MYSQL and ReacJS.. Recently done SpringBoot course on Udemy.. In future my this App will be integrated with Machines for fetching data and Analytics...\n",
            "AND  is Python recommended or Kotlin will help me for Native Application ??\n",
            "The only honest youtuber (Harry sir)❤\n",
            "Thank you sir for give this roadmap ❤🙏\n",
            "Hi Harry ji, your teaching style is very good 😊\n",
            "I was waiting for this I thought I choosen an outdate skill but this video boosted my moral again thankyou Harry bhai\n",
            "We want 100 Days, 100 Videos for Android App Development please Harry Bhai 😊🙏🏻\n",
            "The only course we want is a course by you harry Vai, please bring an android development course.🙏\n",
            "Harry Bhai you will always live in our heart.\n",
            "Python has a cross platform app development framework named Flet, plz make a video on it😊😊\n",
            "Much needed video👍\n",
            "Roasting ka king Carry or Coding ka king Harry 😅🔥\n",
            "Sir please make a course on Kotlin programming language Please. Big fan ❤❤\n",
            "Bhaiya I am Bsc maths student ,I want to make my carrier in technical field but I don't know what i should do , and i am also having fear of AI also , a thought always come by mind what if AI replace my skill for which I am trying by best to improve it day by day . So which skill should i make for future ?? 😊\n",
            "We want a Kotlin full course Harry Bhai.\n",
            "Thank you Harry bhai, this was much needed.\n",
            "bhaiya i follow u from beginning i want to ask i love android dev and dsa how much matters because i dont want to do DSA now want to focus on android dev also i am in 3rd year of BSC Computer Science\n",
            "Amazing Brother! Thank You!\n",
            "Android development in 100 days challenge please using kotlin 🙏\n",
            "Teach  us how  to make your own OS \n",
            "Either making distro or re-inventing the wheel\n",
            "Android development course in 100 days challenge....😢🙏\n",
            "Please made new playlist sir 🙏\n",
            "Really needed this! Thanks Harry bhaiya\n",
            "Sir any suggestions on what is best to use between retrofit and ktor.\n",
            "CONGRATULATIONS India 🇮🇳 for successfully landing Chandrayaan 3\n",
            "\n",
            "HISTORY created!\n",
            "After a long long wait, finally one of the most awaited video is here!\n",
            "Hello Harry bhai, in which year of my btech should I start learning Android development. This year I am going to join college from IT branch. Please guide me as brother.Luv you bhai\n",
            "Today os very good day! on one hand chandrayaan 3 landed successfully and on other hand pragg is holding rank 1 at chess tournament!!\n",
            "If you were to choose between Flutter/Dart and Kotlin.\n",
            "What would you choose?\n",
            "Native platform --kotlin/java(android), swift(ios)\n",
            " flutter(cross platform)\n",
            "Great knowledgeable video Harry brother 🎉\n",
            "Sir these courses are good but they can't compete with your courses because your way of teaching is awesome by the way aap kab se kotlin ka course start kar rahe ho\n",
            "Harry sir aap sabko coder bana k hi rakhoge❤\n",
            "What the timing bhaiya ❤\n",
            "I have a question i'm learning java for making an app as college project so does this jetpack compose can be used with java as well\n",
            "Congrats everyone as Chandrayan lights up the dark side of the moo!! 🇮🇳🇮🇳\n",
            "bhaiya the udemy course which you've mentioned has already lost it's support in 2021, so what to do?\n",
            "Please make a playlist on data science😊\n",
            "congratulations 👏🎊🎊👏🎉 for chandriayan\n",
            "I was learning Java and started development with java but I think from now I need to shift in kotlin\n",
            "You are born for coding sir❤\n",
            "I've learnt Android app development from your 10hr video 3years ago thankyou\n",
            "Haris Bhai please start the playlist of NextJs 13 like you created your playlist of reactJs.\n",
            "I am 10 pass out in 2005 \n",
            "And 12 pass out in 2011\n",
            "With less Mark's\n",
            "It's long gap but still I am curious to know\n",
            "Is it good for me ?\n",
            "Is there any hope for job for me ?\n",
            "I may be go abroad in future\n",
            "Love from pakistan, Harry bhai, completed 70+ videos of web development. Love it <3\n",
            "please make java springboot cours & MERN stack\n",
            "hi sir, thanks for the video, i already watched all your old android dev videos\n",
            "Thank you bro 😊 always you best for me❤\n",
            "Plz upload your complete course on Android development kindly.\n",
            "pls make separate videos for ios developer as well as flutter developer roadmap\n",
            "can you make a new playlist on today's android development sir .\n",
            "You are great harry sir. I want to learn Java programming language.\n",
            "5:59 jet pack compose  amazing framework really great we are working on it less and more less code\n",
            "Most uncommon request:\n",
            "\n",
            "We want video editing course from you..\n",
            "Please Harry sir Please\n",
            "Harry Bhai . How about python for android developing ?\n",
            "please explain more on JAVA and KOTLIN\n",
            "Sir kindly can i know course for a data scientist and cloud computing please 🥺🥺\n",
            "Spring boot tutorial please..💪💯\n",
            "hello sir ,\n",
            "what is electron technology this is helpful for developing app by web technology \n",
            "can you make a one video on that topic ?\n",
            "Hii\n",
            "\n",
            "I'm have learnt ReactJS\n",
            "I'm not from CS/IT background\n",
            "\n",
            "How can I dominate my CV so that recruiter can reach me???\n",
            "I am new college student and i want to learn coding. So can i use kotlin language as my first coding language?\n",
            "Kindly make a full course on kotlin\n",
            "Bro in react native we have native modules using which we can access all Android  system APIs\n",
            "We need Full stack web development course with MERN stack and java with dsa please sir if possible make it or give us the best roadmap\n",
            "Much needed video sir....👏👏\n",
            "Thnku sir for this roadmap❤🙏\n",
            "i have already purchased the same course in 499 but there is a problem it is completly in english and the source code is improper . if we ended at a point in 1 video and moved to new lecture then in next video some other stuff code is added\n",
            "The Ultimate Android development Course in 100 days challenge \n",
            " please 🙏🙏\n",
            "Harry bro please make a playlist for kotlin language tutorial\n",
            "Sir please make a data scientists roadmap again\n",
            "hello harry bhai, i recently completed java from your playlist for android development but now your are saying that we have to learn kotlin for android app why.\n",
            "Can we do devlopment with python ??\n",
            "What are the system requirements for Android Studio\n",
            "Is there any scope in Android Development in the future AI Market?\n",
            "You haven't mentioned about KMM and compose multiplatform\n",
            "I am scared,Things are changing very fast I am going for Kotlin. I am java android app developer. All the best to me 😅\n",
            "Harry brother please make a course on kotlin app development.\n",
            "harry sir .... we need a flutter course..\n",
            "Make a playlist on DAA just like DSA\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import re\n",
        "import nltk\n",
        "from textblob import TextBlob\n",
        "import matplotlib.pyplot as plt\n",
        "from googleapiclient.discovery import build\n",
        "\n",
        "# Function to fetch comments using YouTube Data API\n",
        "def fetch_youtube_comments(api_key, video_id):\n",
        "    youtube = build('youtube', 'v3', developerKey=api_key)\n",
        "    comments = []\n",
        "\n",
        "    request = youtube.commentThreads().list(\n",
        "        part=\"snippet\",\n",
        "        videoId=video_id,\n",
        "        textFormat=\"plainText\",\n",
        "        order=\"relevance\",\n",
        "        maxResults=100\n",
        "    )\n",
        "\n",
        "    response = request.execute()\n",
        "\n",
        "    for item in response[\"items\"]:\n",
        "        comment = item[\"snippet\"][\"topLevelComment\"][\"snippet\"][\"textDisplay\"]\n",
        "        comments.append(comment)\n",
        "\n",
        "    return comments\n",
        "\n",
        "# Use the API key and video ID to fetch comments\n",
        "api_key = \"AIzaSyCSSgeaDnJwCtV4iRHXXTFJWh93wMnaDBE\"  # Replace with your YouTube Data API key\n",
        "video_id = \"KAh2TOrtTq4\"  # Replace with the YouTube video ID you want to analyze\n",
        "\n",
        "comments = fetch_youtube_comments(api_key, video_id)\n",
        "\n",
        "# Continue with preprocessing, sentiment analysis, and visualization...\n",
        "# ... (use the pre-processing, sentiment analysis, and visualization code from previous steps)\n",
        "\n",
        "# Example usage: Print the comments fetched\n",
        "print(\"Comments fetched from the video:\")\n",
        "for comment in comments:\n",
        "    print(comment)\n",
        "\n",
        "# Perform sentiment analysis on the comments and plot the sentiment distribution\n",
        "preprocessed_comments = [preprocess_text(comment) for comment in comments]\n",
        "sentiment_scores = perform_sentiment_analysis(preprocessed_comments)\n",
        "plot_sentiment_distribution(sentiment_scores)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LvZpuLNnUtaq",
        "outputId": "9a227a7f-60ab-4685-8e86-dd45719b4ae7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.27.1-py2.py3-none-any.whl (7.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.5/7.5 MB\u001b[0m \u001b[31m15.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.2.2)\n",
            "Requirement already satisfied: blinker<2,>=1.0.0 in /usr/lib/python3/dist-packages (from streamlit) (1.4)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (5.3.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (8.1.7)\n",
            "Requirement already satisfied: importlib-metadata<7,>=1.4 in /usr/local/lib/python3.10/dist-packages (from streamlit) (6.8.0)\n",
            "Requirement already satisfied: numpy<2,>=1.19.3 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.23.5)\n",
            "Requirement already satisfied: packaging<24,>=16.8 in /usr/local/lib/python3.10/dist-packages (from streamlit) (23.1)\n",
            "Requirement already satisfied: pandas<3,>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.5.3)\n",
            "Requirement already satisfied: pillow<11,>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (9.4.0)\n",
            "Requirement already satisfied: protobuf<5,>=3.20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (3.20.3)\n",
            "Requirement already satisfied: pyarrow>=6.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (9.0.0)\n",
            "Requirement already satisfied: python-dateutil<3,>=2.7.3 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.8.2)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.31.0)\n",
            "Requirement already satisfied: rich<14,>=10.14.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (13.5.2)\n",
            "Requirement already satisfied: tenacity<9,>=8.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (8.2.3)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.10/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.5.0)\n",
            "Requirement already satisfied: tzlocal<6,>=1.1 in /usr/local/lib/python3.10/dist-packages (from streamlit) (5.0.1)\n",
            "Collecting validators<1,>=0.2 (from streamlit)\n",
            "  Downloading validators-0.22.0-py3-none-any.whl (26 kB)\n",
            "Collecting gitpython!=3.1.19,<4,>=3.0.7 (from streamlit)\n",
            "  Downloading GitPython-3.1.37-py3-none-any.whl (190 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m190.0/190.0 kB\u001b[0m \u001b[31m12.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.8.1b0-py2.py3-none-any.whl (4.8 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.8/4.8 MB\u001b[0m \u001b[31m33.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.10/dist-packages (from streamlit) (6.3.2)\n",
            "Collecting watchdog>=2.1.5 (from streamlit)\n",
            "  Downloading watchdog-3.0.0-py3-none-manylinux2014_x86_64.whl (82 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m82.1/82.1 kB\u001b[0m \u001b[31m9.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: entrypoints in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.4)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (3.1.2)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (4.19.0)\n",
            "Requirement already satisfied: toolz in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.12.0)\n",
            "Collecting gitdb<5,>=4.0.1 (from gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
            "  Downloading gitdb-4.0.10-py3-none-any.whl (62 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata<7,>=1.4->streamlit) (3.16.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=1.3.0->streamlit) (2023.3.post1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil<3,>=2.7.3->streamlit) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (3.2.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (3.4)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (2.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->streamlit) (2023.7.22)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.14.0->streamlit) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.14.0->streamlit) (2.16.1)\n",
            "Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
            "  Downloading smmap-5.0.1-py3-none-any.whl (24 kB)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.3)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (23.1.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.7.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.30.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.10.2)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.2)\n",
            "Installing collected packages: watchdog, validators, smmap, pydeck, gitdb, gitpython, streamlit\n",
            "Successfully installed gitdb-4.0.10 gitpython-3.1.37 pydeck-0.8.1b0 smmap-5.0.1 streamlit-1.27.1 validators-0.22.0 watchdog-3.0.0\n"
          ]
        }
      ],
      "source": [
        "!pip install streamlit\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "7z6iaZA6U16x"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6NkFjsIsU6Jq",
        "outputId": "f04eb31c-09c6-4701-8a97-18073d6448f2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2023-09-30 15:25:32.954 \n",
            "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
            "  command:\n",
            "\n",
            "    streamlit run /usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py [ARGUMENTS]\n"
          ]
        }
      ],
      "source": [
        "# Define the Streamlit app\n",
        "st.title('YouTube Video Analyzer')\n",
        "\n",
        "# Add input for YouTube video URL\n",
        "video_url = st.text_input('Enter YouTube Video URL:')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import re\n",
        "import nltk\n",
        "from textblob import TextBlob\n",
        "import matplotlib.pyplot as plt\n",
        "from googleapiclient.discovery import build\n",
        "\n",
        "# Function to fetch YouTube comments using the YouTube Data API\n",
        "def fetch_youtube_comments(api_key, video_id):\n",
        "    \"\"\"\n",
        "    Fetches comments for a YouTube video using the YouTube Data API.\n",
        "\n",
        "    Parameters:\n",
        "        api_key (str): The YouTube Data API key.\n",
        "        video_id (str): The YouTube video ID for which to fetch comments.\n",
        "\n",
        "    Returns:\n",
        "        list: A list of comments for the specified video.\n",
        "    \"\"\"\n",
        "    # Use the YouTube Data API to fetch comments\n",
        "    # ...\n",
        "    return comments\n",
        "\n",
        "# Function to preprocess text\n",
        "def preprocess_text(comment):\n",
        "    \"\"\"\n",
        "    Preprocesses a comment text.\n",
        "\n",
        "    Parameters:\n",
        "        comment (str): The comment text to be preprocessed.\n",
        "\n",
        "    Returns:\n",
        "        str: The preprocessed comment text.\n",
        "    \"\"\"\n",
        "    # Preprocess the comment\n",
        "    # ...\n",
        "    return preprocessed_comment\n",
        "\n",
        "# Function to analyze sentiment\n",
        "def analyze_sentiment(comment):\n",
        "    \"\"\"\n",
        "    Analyzes the sentiment of a given comment using TextBlob.\n",
        "\n",
        "    Parameters:\n",
        "        comment (str): The comment text to be analyzed.\n",
        "\n",
        "    Returns:\n",
        "        str: Sentiment label ('positive', 'negative', or 'neutral').\n",
        "    \"\"\"\n",
        "    # Analyze sentiment\n",
        "    # ...\n",
        "    return sentiment_label\n",
        "\n",
        "# Function to perform sentiment analysis\n",
        "def perform_sentiment_analysis(preprocessed_comments):\n",
        "    \"\"\"\n",
        "    Performs sentiment analysis on a list of preprocessed comments.\n",
        "\n",
        "    Parameters:\n",
        "        preprocessed_comments (list): A list of preprocessed comments.\n",
        "\n",
        "    Returns:\n",
        "        dict: A dictionary containing sentiment labels and their corresponding counts.\n",
        "    \"\"\"\n",
        "    # Perform sentiment analysis\n",
        "    # ...\n",
        "    return sentiment_scores\n",
        "\n",
        "# Function to plot sentiment distribution\n",
        "def plot_sentiment_distribution(sentiment_scores):\n",
        "    \"\"\"\n",
        "    Plots the sentiment distribution pie chart.\n",
        "\n",
        "    Parameters:\n",
        "        sentiment_scores (dict): A dictionary containing sentiment labels and their corresponding counts.\n",
        "    \"\"\"\n",
        "    labels = sentiment_scores.keys()\n",
        "    sizes = [sentiment_scores[label] for label in labels]\n",
        "\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, colors=['#66b3ff', '#99ff99', '#ff9999'])\n",
        "    plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
        "    plt.title('Sentiment Distribution of Comments')\n",
        "    plt.show()\n",
        "\n",
        "# Define the Streamlit app\n",
        "st.title('YouTube Video Analyzer')\n",
        "\n",
        "# Add input for YouTube video URL\n",
        "video_url = st.text_input('Enter YouTube Video URL:')\n",
        "\n",
        "# Fetch comments and display sentiment analysis results\n",
        "if video_url:\n",
        "    # Replace with your YouTube API key\n",
        "    api_key = \"AIzaSyCSSgeaDnJwCtV4iRHXXTFJWh93wMnaDBE\"\n",
        "\n",
        "    comments = fetch_youtube_comments(api_key, video_id)\n",
        "    preprocessed_comments = [preprocess_text(comment) for comment in comments]\n",
        "    sentiment_scores = perform_sentiment_analysis(preprocessed_comments)\n",
        "\n",
        "    # Display sentiment distribution\n",
        "    st.write('### Sentiment Distribution')\n",
        "    plot_sentiment_distribution(sentiment_scores)\n",
        "\n",
        "# Display information about the app\n",
        "if __name__ == '__main__':\n",
        "    st.set_option('deprecation.showPyplotGlobalUse', False)  # Disable a Streamlit warning\n",
        "    st.write(\"## Analyze YouTube Comments\")\n",
        "    st.write(\"Enter a YouTube video URL above to analyze comments.\")\n"
      ],
      "metadata": {
        "id": "x3IGj-pws04-"
      },
      "execution_count": 17,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOyyAAAvtxeKZwl0LhHgHqk",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}